[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_add='''
let g:deoplete#enable_at_startup = 1
"関数補完時に画面下に出るプレビューウィンドウを非表示
set completeopt-=preview
'''

#スニペット
[[plugins]]
repo = 'Shougo/neosnippet.vim'
#rev = '3581e4c'
depends = ['neosnippet-snippets']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_add='''

" タブキーで補完候補の選択. スニペット内のジャンプもタブキーでジャンプ
imap <expr><TAB>
            \ pumvisible() ? "\<Down>" :
            \ neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" エンターキーでスニペット挿入or補完確定orポップアップ閉じる
imap <expr><CR>
            \ (pumvisible() && neosnippet#expandable()) ? "\<C-y>" :
            \ pumvisible() ? deoplete#close_popup() :"\<CR>"

"ユーザースニペットのやつ呼び出すコマンド長スギ
command Snip :NeoSnippetEdit

"スニペットの場所を指定
let g:neosnippet#snippets_directory='~/.config/nvim/snippets'

"languageclientでスニペット機能(関数の引数補完)を使うのに必要
"let g:neosnippet#enable_completed_snippet = 1
let g:neosnippet#enable_complete_done = 1
'''

#基本のスニペット入ってるやつ
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'prettier/vim-prettier'
hook_add = '''
autocmd BufWritePre *.html,*.js,*.ts,*.vue,*.css,*.scss,*.json,*.md PrettierAsync
let g:prettier#config#tab_width = 2
'''

[[plugins]]
repo = 'lervag/vimtex'
on_ft = 'tex'
hook_post_source = '''
let g:vimtex_compiler_latexmk = {
      \ 'background': 1,
      \ 'build_dir': '',
      \ 'continuous': 1,
      \ 'options': [
      \    '-pdfdvi',
      \    '-c',
      \    '-verbose',
      \    '-file-line-error',
      \    '-synctex=1',
      \    '-interaction=nonstopmode',
      \],
      \}
let g:vimtex_view_general_viewer = '/Applications/Skim.app/Contents/SharedSupport/displayline'
let g:vimtex_view_general_options = '@line @pdf @tex'
" texのconcealを無効化　有効だとバチクソ見にくい
"let g:tex_conceal=''
call deoplete#custom#var('omni', 'input_patterns', {
          \ 'tex': g:vimtex#re#deoplete
          \})
command! Cp :VimtexCompile
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'

[[plugins]]
repo = 'kannokanno/previm'
hook_add = '''
autocmd BufRead,BufNewFile *.md set filetype=markdown
let g:previm_open_cmd = 'open -a Safari'
" ctrl pでプレビュー
nnoremap <silent> <C-p> :PrevimOpen<CR>
'''

#[[plugins]]
#repo = 'vim-syntastic/syntastic'
#on_ft = 'rust'
#hook_source = '''
#set statusline+=%#warningmsg#
#set statusline+=%{SyntasticStatuslineFlag()}
#set statusline+=%*
#
#let g:syntastic_always_populate_loc_list = 1
#let g:syntastic_auto_loc_list = 1
#let g:syntastic_check_on_open = 1
#let g:syntastic_check_on_wq = 0
#'''

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
let g:syntastic_rust_checkers = ['rustc']
'''

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'
