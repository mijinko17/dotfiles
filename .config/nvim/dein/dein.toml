#カラースキーム
[[plugins]]
repo = 'kristijanhusak/vim-hybrid-material'
on_event='VimEnter'
hook_add='''
set background=dark
colorscheme hybrid_material
"autocmd MyAutoCmd VimEnter * colorscheme hybrid
if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
if (has("termguicolors"))
  set termguicolors
endif
'''

##カラースキーム
#[[plugins]]
#repo = 'sainnhe/gruvbox-material'
#on_event='VimEnter'
#hook_add='''
#set background=dark
#let g:gruvbox_material_background = 'hard'
#colorscheme gruvbox-material
#if (has("nvim"))
#  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
#endif
#if (has("termguicolors"))
#  set termguicolors
#endif
#'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
depends = ['deoplete.nvim']
build = 'bash install.sh'
hook_add = '''
set hidden
set signcolumn=yes
let g:LanguageClient_serverCommands = {
"            \ 'cpp': ['ccls'],
            \ 'cpp': ['clangd', '-header-insertion=never'],
            \ 'go': ['gopls'],
            \ 'python': ['pyls'],
            \ 'javascript': ['typescript-language-server', '--stdio'],
            \ 'typescript': ['typescript-language-server', '--stdio'],
            \ 'vue': ['vls'],
"            \ 'rust': ['rust-analyzer'],
            \ 'rust': ['rls'],
            \ 'tex': ['digestif'],
"            \ 'tex': ['texlab'],
            \ }
autocmd BufWritePre *.go,*.py,*.cpp,*.vue,*.rs :call LanguageClient#textDocument_formatting_sync()
let g:LanguageClient_loadSettings = 1
let g:LanguageClient_hasSnippetSupport=1
"let g:LanguageClient_settingsPath='~/settings.json'
let g:LanguageClient_settingsPath = '~/.config/nvim/settings.json'
"let g:LanguageClient_completionPreferTextEdit=1
set completefunc=LanguageClient#complete
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_ft = ['cpp', 'python', 'go', 'ts']
hook_add = '''
"quickrun
set splitbelow
let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
"クリップボードから実行
nnoremap rr :QuickRun<Space>-input<Space>=@+<CR>
"インプットファイルを開く
nnoremap ri :vs<Space>input<CR>
"インプットファイルから実行
nnoremap re :QuickRun<Space>-input<Space>input<CR>
let g:quickrun_config.cpp = {
\   'command': 'g++-9',
\   'cmdopt': '-std=c++14',
\   'outputter/buffer/split': '10'
\ }
let g:quickrun_config.python = {
\   'command': 'python3',
\   'outputter/buffer/split': '10'
\ }
let g:quickrun_config.go = {
\   'command' : 'go',
\   'outputter/buffer/split': '10'
\}
let g:quickrun_config.typescript = {
\   'command' : 'tsc',
\   'outputter/buffer/split': '10'
\}
let g:quickrun_config.rust = {
\   'command' : 'rustc',
\   'outputter/buffer/split': '10'
\}
'''

#tomlファイルのシンタックスハイライト
[[plugins]]
repo = 'cespare/vim-toml'
on_ft='toml'

[[plugins]]
repo = "airblade/vim-gitgutter"

[[plugins]]
repo = 'rust-lang/rust.vim'
