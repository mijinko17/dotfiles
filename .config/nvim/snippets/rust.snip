include rust_snippets.snip

snippet     header
abbr        header
options     head
    #![allow(unused_imports)]
    #![allow(dead_code)]

    use std::collections::*;

    fn main() {
        let (r, w) = (std::io::stdin(), std::io::stdout());
        let mut sc = IO::new(r.lock(), w.lock());

        ${0}
    }

    pub struct IO<R, W: std::io::Write>(R, std::io::BufWriter<W>);

    impl<R: std::io::Read, W: std::io::Write> IO<R, W> {
        pub fn new(r: R, w: W) -> IO<R, W> {
            IO(r, std::io::BufWriter::new(w))
        }
        pub fn write<S: ToString>(&mut self, s: S) {
            use std::io::Write;
            self.1.write(s.to_string().as_bytes()).unwrap();
        }
        pub fn read<T: std::str::FromStr>(&mut self) -> T {
            use std::io::Read;
            let buf = self
                .0
                .by_ref()
                .bytes()
                .map(|b| b.unwrap())
                .skip_while(|&b| b == b' ' || b == b'\n' || b == b'\r' || b == b'\t')
                .take_while(|&b| b != b' ' && b != b'\n' && b != b'\r' && b != b'\t')
                .collect::<Vec<_>>();
            unsafe { std::str::from_utf8_unchecked(&buf) }
                .parse()
                .ok()
                .expect("Parse error.")
        }
        pub fn vec<T: std::str::FromStr>(&mut self, n: usize) -> Vec<T> {
            (0..n).map(|_| self.read()).collect()
        }
        pub fn chars(&mut self) -> Vec<char> {
            self.read::<String>().chars().collect()
        }
    }

snippet     header2
abbr        new header
options     head
    #![allow(unused_imports)]
    #![allow(dead_code)]

    use proconio::input;
    use proconio::marker::{Bytes, Chars};
    use std::collections::*;

    fn main() {
        ${0}
    }

snippet     snippet
abbr        snippet
options     head
    #[snippet("${1}")]

snippet     clone
abbr        clone
options     head
    #[derive(Debug, Copy, Clone)]

snippet     input
abbr        input macro
options     head
    input! {
        ${0}
    }

snippet     println
abbr        println
options     head
    println!(${1});

snippet gcd
abbr    gcd
options head
    fn gcd(a: i64, b: i64) -> i64 {
        if b == 0 {
            a
        } else {
            gcd(b, a % b)
        }
    }

snippet     modpow
abbr        modpow
alias       powmod
options     head
    fn modpow(a: i64, x: i64, m: i64) -> i64 {
        if x == 0 {
            1
        } else if x % 2 != 0 {
            a * modpow(a, x - 1, m) % m
        } else {
            let half = modpow(a, x / 2, m);
            half * half % m
        }
    }

snippet     combination_mod
abbr        nCrをキビキビ計算
options     head
    struct CombinationMod {
        fac: Vec<i64>,
        inv: Vec<i64>,
        inv_fac: Vec<i64>,
        modulo: i64,
    }
    impl CombinationMod {
        pub fn new(size: usize, modulo: i64) -> CombinationMod {
            let mut fac = vec![1; size + 1];
            let mut inv = vec![1; size + 1];
            let mut inv_fac = vec![1; size + 1];
            for i in 2..=size {
                fac[i] = fac[i - 1] * i as i64 % modulo;
                inv[i] = modulo - inv[modulo as usize % i] * (modulo / i as i64) % modulo;
                inv_fac[i] = inv_fac[i - 1] * inv[i] % modulo;
            }
            CombinationMod {
                fac: fac,
                inv: inv,
                inv_fac: inv_fac,
                modulo: modulo,
            }
        }
        fn query(&self, n: i64, r: i64) -> i64 {
            self.fac[n as usize] * self.inv_fac[r as usize] % self.modulo
                * self.inv_fac[(n - r) as usize]
                % self.modulo
        }
        fn inverse(&self, n: i64) -> i64 {
            self.inv[n as usize]
        }
    }

snippet     Graph
abbr        辺とグラフ
alias       Edge
options     head
    // グラフの辺
    #[derive(Debug, Copy, Clone)]
    struct Edge {
        to: usize,
        cost: i64,
    }
    impl Edge {
        pub fn new(to: usize, cost: i64) -> Edge {
            Edge { to: to, cost: cost }
        }
    }

    // 隣接リストによるグラフ
    struct Graph {
        adjacency: Vec<Vec<Edge>>,
    }
    impl Graph {
        pub fn new(size: usize) -> Self {
            Graph {
                adjacency: vec![vec![]; size],
            }
        }
        // 頂点数を取得
        fn len(&self) -> usize {
            self.adjacency.len()
        }
        // 有向辺を追加する
        fn add_directional_edge(&mut self, from: usize, to: usize, cost: i64) {
            self.adjacency[from].push(Edge::new(to, cost));
        }
        // 無向辺を追加する
        fn add_undirectional_edge(&mut self, from: usize, to: usize, cost: i64) {
            self.add_directional_edge(from, to, cost);
            self.add_directional_edge(to, from, cost);
        }
    }
    impl std::ops::Index<usize> for Graph {
        type Output = Vec<Edge>;
        fn index(&self, vertex: usize) -> &Self::Output {
            &self.adjacency[vertex]
        }
    }

snippet     distance_nonweight
abbr        重みを無視したグラフの距離
options     head
    // 重みを無視したグラフの距離
    fn distance_nonweight(graph: &Vec<Vec<Edge>>, start: usize) -> Vec<i32> {
        let mut res = vec![std::i32::MAX; graph.len()];
        res[start] = 0;
        let mut bfs = std::collections::VecDeque::new();
        bfs.push_back(start);
        while !bfs.is_empty() {
            let now = bfs.pop_front().unwrap();
            for e in graph[now].iter() {
                if res[now] + 1 < res[e.to] {
                    res[e.to] = res[now] + 1;
                    bfs.push_back(e.to);
                }
            }
        }
        res
    }

snippet     dijkstra
abbr        dijkstra
options     head
    fn dijkstra(g: &Graph, start: usize) -> Vec<i64> {
        use std::cmp::Reverse;
        let mut res = vec![std::i64::MAX; g.len()];
        res[start] = 0;
        let mut heap = std::collections::BinaryHeap::new();
        heap.push(Reverse((0, start)));
        while let Some(Reverse((dist, now))) = heap.pop() {
            if res[now] == dist {
                for e in g[now].iter() {
                    if res[now] + e.cost < res[e.to] {
                        res[e.to] = res[now] + e.cost;
                        heap.push(Reverse((res[e.to], e.to)));
                    }
                }
            }
        }
        res
    }
