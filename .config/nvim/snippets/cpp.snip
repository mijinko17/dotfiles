snippet     header
abbr        include+main
options     head
    #include <bits/stdc++.h>
    typedef long long lint;
    using namespace std;

    int main() {
        ${0}
    }

snippet     ifshort
abbr        not use {}
options     head
    if (${1}) ${0}

snippet     forshort
abbr        not use {}
options     head
    for (int ${1:i} = 0; $1 < ${2}; $1++) ${0}

snippet     upper_bound
abbr        xより真に値が大きいもので最小のイテレータ
options     word
    upper_bound(${1}, ${2})

snippet     lower_bound
abbr        値がx以上の最小のイテレータ
options     word
    lower_bound(${1}, ${2})

snippet     ll 
abbr        long long int
options     word
    long long int

snippet     bits
abbr        include <bits/stdc++.h>
options     head
    #include <bits/stdc++.h>

snippet     all
abbr        v.begin(), v.end()
options     word
    ${1}.begin(), $1.end()${0}

snippet     getDigit
abbr        整数の桁数
options     head
    long long int getDigit(long long int num) {
        return to_string(num).length();
    }

snippet     ch
abbr        update min/max
alias       chmin,chmax
options     head
    template <class T>
    bool chmax(T &a, const T &b) {
        if (a < b) {
            a = b;
            return 1;
        }
        return 0;
    }
    template <class T>
    bool chmin(T &a, const T &b) {
        if (b < a) {
            a = b;
            return 1;
        }
        return 0;
    }

snippet     setprecision
abbr        doubleの時用
options     word
    setprecision(${1})${0}

snippet     powint
abbr        calc a^n
options     head
    // a^nを計算　O(log n)
    long long int powint(long long int a, long long int n) {
        if (n == 0) {
            return 1;
        } else {
            long long int temp = powint(a, n / 2);
            if (n % 2 == 0) {
                return temp * temp;
            } else {
                return temp * temp * a;
            }
        }
    }${0}

snippet     pow_mod
abbr        calc a^n mod p
options     head
    // a^n mod pを計算　O(log n)
    long long int pow_mod(long long int a, long long int n, long long int p) {
        if (n == 0) return 1;
        long long int temp = pow_mod(a, n / 2, p);
        return n & 1 ? (((temp * temp) % p) * a) % p : (temp * temp) % p;
    }${0}

snippet     inv_mod
abbr        inverse element in Z_p
options     head
    // Z_pでのaの逆元を計算 O(log p)
    // depend:pow_mod
    long long int inv_mod(long long int a, long long int p) {
        return pow_mod(a, p - 2, p);
    }${0}

snippet     bit
abbr        n th number of a when representing p
options     head
    // aをp進数で表した時の下からn桁目を計算
    long long int bit(long long int a, long long int p, long long int n) {
        return (a / powint(p, n)) % p;
    }${0}

snippet     gcd
abbr        gcd by euclid
options     head
    //最大公約数の計算(ユークリッドの互除法)
    long long int gcd(long long int a, long long int b) {
        if (b == 0) return a;
        return gcd(b, a % b);
    }${0}

snippet     combination
abbr        calc nCr by pascal's triangle
options     head
    //コンビネーション(パスカルの三角形)
    vector<vector<long long int>> comb(long long int n) {
        vector<vector<long long int>> res(n + 1, vector<long long int>(n + 1, 1));
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j < i; j++) {
                res[i][j] = res[i - 1][j - 1] + res[i - 1][j];
            }
        }
        return res;
    }${0}

snippet     combination_mod
abbr        struct:calc nCr by n! table
options     head
    // nCr mod p(n<p)をキビキビ計算する
    // 構築:O(n), クエリ:O(1)
    struct combination_mod {
        using lint = long long int;
        int sz;
        lint mod;
        vector<lint> fac;
        vector<lint> finv;
        combination_mod(int _sz, lint _mod) : sz(_sz), mod(_mod) {
            fac.assign(sz + 1, 1);
            finv.assign(sz + 1, 1);
            vector<lint> inv(sz + 1, 1);
            for (int i = 2; i <= sz; i++) {
                fac[i] = fac[i - 1] * i % mod;
                inv[i] = mod - inv[mod % i] * (mod / i) % mod;
                finv[i] = finv[i - 1] * inv[i] % mod;
            }
        }
        lint query(int n, int r) {
            return fac[n] * (finv[r] * finv[n - r] % mod) % mod;
        }
    };${0}

snippet     pf_vec
abbr        prime factorization with vector
alias       prime factorization
options     head
    // 素因数分解 O(√N)
    vector<long long int> pf_vec(long long int n) {
        vector<long long int> res;
        for (long long int i = 2; i * i <= n; i++)
            if (n % i == 0) {
                res.push_back(i);
                while (n % i == 0) n /= i;
            }
        if (n != 1) res.push_back(n);
        return res;
    }${0}

snippet     pf_um
abbr        prime factorization with unordered_map
alias       prime factorization
options     head
    //素因数分解unordered_map版　O(√n)
    template <typename T>
    unordered_map<T, T> pf_um(T n) {
        unordered_map<T, T> res;
        for (long long int i = 2; i * i <= n; i++)
            while (n % i == 0) {
                res[i]++;
                n /= i;
            }
        if (n != 1) res[n]++;
        return res;
    }${0}

snippet     lis
abbr        lis 引数1つだと広義単調増加(=非減少)
options     head
    // 最長非減少部分列の長さ
    // type==false<=>狭義単調増加列の長さ
    template <typename T>
    int lis(const vector<T>& a, bool type = true) {
        int n = a.size();
        vector<long long int> dp(n, LLONG_MAX);
        for (int i = 0; i < n; i++) {
            auto itr = type ? upper_bound(dp.begin(), dp.end(), a[i])
                            : lower_bound(dp.begin(), dp.end(), a[i]);
            *itr = a[i];
        }
        return lower_bound(dp.begin(), dp.end(), LLONG_MAX) - dp.begin();
    }${0}

snippet     inversion_number
abbr        depend:segment_tree
options     head
    // 各項の順序を保ったまま最小値0,最大値size()-1以下にする
    template <typename T>
    vector<T> simplify(vector<T>& a) {
        int n = a.size();
        vector<T> b = a;
        sort(b.begin(), b.end());
        vector<T> res(n);
        for (int i = 0; i < n; i++)
            res[i] = lower_bound(b.begin(), b.end(), a[i]) - b.begin();
        return res;
    }
    // 転倒数を計算
    // depend:segment_tree
    template <typename T>
    long long inversion_number(vector<T>& a) {
        using lint = long long int;
        int n = a.size();
        vector<T> b = simplify(a);
        segment_tree<lint> count(
            n, [](lint a, lint b) { return a + b; }, 0);
        lint res = 0;
        for (int i = 0; i < n; i++) {
            res += count.query(b[i] + 1, n);
            count.update(b[i], count[b[i]] + 1);
        }
        return res;
    }${0}

snippet     cumulative_sum
abbr        cumulative_sum
options     head
    // 累積和
    struct cumulative_sum {
        using lint = long long int;
        int sz;
        // data[i]:元の数列
        vector<lint> data;
        // cum[i]:[0,i)の和
        vector<lint> sum;
        // 要素数を指定して初期化
        cumulative_sum(const int _sz) : sz(_sz) {
            data.assign(sz, 0);
            sum.assign(sz + 1, 0);
        }
        lint& operator[](const int k) {
            return data[k];
        }
        // dataに基づいてsumを構築
        void build() {
            for (int i = 0; i < sz; i++) sum[i + 1] = sum[i] + data[i];
        }
        // [a,b)の和を求める
        lint query(const int a, const int b) {
            return sum[b] - sum[a];
        }
    };${0}

snippet     cumulative_sum_2D
abbr        cumulative sum 2D
options     head
    //二次元累積和
    struct cumulative_sum_2d {
        using lint = long long int;
        int sz;
        vector<vector<lint>> data;
        vector<vector<lint>> sum;
        cumulative_sum_2d(const int _sz) : sz(_sz) {
            data.assign(sz, vector<lint>(sz));
            sum.assign(sz + 1, vector<lint>(sz + 1));
        }
        vector<lint>& operator[](const int k) {
            return data[k];
        }
        void build() {
            for (int i = 0; i < sz; i++)
                for (int j = 0; j < sz; j++)
                    sum[i + 1][j + 1] =
                        sum[i + 1][j] + sum[i][j + 1] - sum[i][j] + data[i][j];
        }
        //[a,b)×[c,d)の和を計算
        lint query(const int a, const int b, const int c, const int d) const {
            return sum[b][d] - sum[b][c] - sum[a][d] + sum[a][c];
        }
    };${0}

snippet     bipartite
abbr        bipartite decomposition
options     head
    //連結二部グラフの分割を+1,-1で与える
    // graphは隣接リスト
    //bipartite[0]で二部グラフか判定([0]==1:二部グラフ、[0]==0:二部グラフでない)
    vector<int> bipartite(vector<vector<int>> &graph) {
        vector<int> res(graph.size(), 0);
        res[0] = 1;
        queue<int> bfs;
        bfs.push(0);
        while (bfs.size() > 0) {
            int depart = bfs.front();
            vector<int> dests = graph[depart];
            for (int i = 0; i < (int)dests.size(); i++) {
                if (res[dests[i]] == 0) {
                    res[dests[i]] = -res[depart];
                    bfs.push(dests[i]);
                } else if (res[dests[i]] * res[depart] == 1) {
                    res[0] = 0;
                    return res;
                }
            }
            bfs.pop();
        }
        return res;
    }${0}

snippet     isBipartite
abbr        judge the graph is bipartite or not
options     head
    //連結グラフが二部グラフか判定
    // graphは隣接リスト
    bool isBipartite(vector<vector<int>> &graph) {
        vector<int> res(graph.size(), 0);
        res[0] = 1;
        queue<int> bfs;
        bfs.push(0);
        while (bfs.size() > 0) {
            int depart = bfs.front();
            vector<int> dests = graph[depart];
            for (int i = 0; i < (int)dests.size(); i++) {
                if (res[dests[i]] == 0) {
                    res[dests[i]] = -res[depart];
                    bfs.push(dests[i]);
                } else if (res[dests[i]] * res[depart] == 1) {
                    return false;
                }
            }
            bfs.pop();
        }
        return true;
    }${0}

snippet     edge
abbr        edge
options     head
    //ただの辺
    struct edge {
        using lint = long long int;
        int to;
        lint cost;
        //引数一つの時は距離1
        edge(int t, lint c = 1) : to(t), cost(c) {
        }
    };${0}

snippet     farest
abbr        calc farest vartex,depend:edge
alias       tree_farest
options     head
    // fromからもっとも遠い頂点(second)とその距離(first)を求める
    // depend:edge
    pair<long long int, int> tree_farest(vector<vector<edge>>& g, int from,
                                         int par) {
        using lint = long long int;
        pair<lint, int> res = {0, from};
        for (int i = 0; i < (int)g[from].size(); i++) {
            if (g[from][i].to == par) continue;
            pair<lint, int> sub = tree_farest(g, g[from][i].to, from);
            sub.first += g[from][i].cost;
            res = max(res, sub);
        }
        return res;
    }${0}

snippet     diameter
abbr        depend:edge,farest
alias       tree_diameter
options     head
    //木の直径
    // depend:edge,tree_farest
    long long int tree_diameter(vector<vector<edge>>& g) {
        pair<long long int, int> temp = tree_farest(g, 0, -1);
        return tree_farest(g, temp.second, -1).first;
    }${0}

snippet     dijkstra
abbr        depend:edge
options     head
    // dijkstra
    // depend:edge
    vector<long long int> dijkstra(vector<vector<edge>>& g, int start) {
        using lint = long long int;
        vector<lint> res(g.size(), LLONG_MAX);
        res[start] = 0;
        // first:距離、second:行き先
        priority_queue<pair<lint, lint>, vector<pair<lint, lint>>,
                       greater<pair<lint, lint>>>
            pq;
        pq.push({0, start});
        while (!pq.empty()) {
            lint dist = pq.top().first, now = pq.top().second;
            pq.pop();
            if (res[now] < dist) continue;
            for (int i = 0; i < (int)g[now].size(); i++) {
                edge e = g[now][i];
                if (res[e.to] > res[now] + e.cost) {
                    res[e.to] = res[now] + e.cost;
                    pq.push(make_pair(res[e.to], e.to));
                }
            }
        }
        return res;
    }${0}

snippet     bellman_ford
abbr        depend:edge
options     head
    // Bellman-Ford
    // depend:edge
    // 到達不可能:LLONG_MAX、負閉路を経由可能:LLONG_MIN
    vector<lint> bellman_ford(vector<vector<edge>>& g, int s) {
        int n = g.size();
        vector<long long int> res(n, LLONG_MAX);
        res[s] = 0;
        for (int i = 0; i < 2 * n; i++) {
            for (int j = 0; j < n; j++) {
                if (res[j] == LLONG_MAX) continue;
                for (int k = 0; k < (int)g[j].size(); k++) {
                    int c = g[j][k].cost, dest = g[j][k].to;
                    if (i < n - 1) {
                        res[dest] = min(res[dest], res[j] + c);
                    } else {
                        if (res[j] == LLONG_MIN || res[dest] > res[j] + c)
                            res[dest] = LLONG_MIN;
                    }
                }
            }
        }
        return res;
    }${0}

snippet     warshall_floyd
abbr        void warshall_floyd
alias       wf
options     head
    // warshall_floyd
    // dは隣接行列(long long intを使うこと)
    void warshall_floyd(vector<vector<long long int>>& d) {
        long long int n = d.size();
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (d[i][k] == LLONG_MAX || d[k][j] == LLONG_MAX) continue;
                    d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
                }
            }
        }
    }${0}

snippet     topological sort
abbr        vector<int> topological_sort
options     head
    // トポロジカルソート　O(V+E)
    // depend:edge
    // 失敗した場合res[0]=-1
    vector<int> tolological_sort(vector<vector<edge>>& g) {
        int n = g.size();
        vector<int> res;
        vector<int> indeg(n, 0);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < (int)g[i].size(); j++) {
                indeg[g[i][j].to]++;
            }
        }
        stack<int> s;
        for (int i = 0; i < n; i++) {
            if (indeg[i] == 0) s.push(i);
        }
        while (!s.empty()) {
            int now = s.top();
            s.pop();
            res.push_back(now);
            for (int i = 0; i < (int)g[now].size(); i++) {
                indeg[g[now][i].to]--;
                if (indeg[g[now][i].to] == 0) s.push(g[now][i].to);
            }
        }
        //失敗時の処理
        if ((int)res.size() < n) {
            // vectorが空かもしれないので適当に入れる
            res.push_back(-1);
            res[0] = -1;
        }
        return res;
    }${0}

snippet     circle
abbr        identified v[0]~v[n]
options     head
    //円形リスト
    template <typename Num>
    struct circle {
        vector<Num> c;
        long long int _l;
        circle(long long int l) : _l(l) {
            c = vector<Num>(l);
        }
        Num& operator[](int k) {
            int temp = k % _l;
            if (temp < 0) temp += _l;
            return c[temp];
        }
    };${0}

snippet     union_find
abbr        struct union_find(long long int n)
alias       uf
options     head
    //素集合データ構造
    // ref:https://ei1333.github.io/luzhiled/snippets/structure/union-find.html
    struct union_find {
        // parent[v]==w(>=0):vの親はw
        // parent[v]==k(<0):vは根&&vの属するグループの要素数は-k
        vector<long long int> parent;
        //コンストラクタ
        union_find(long long int n) {
            parent.assign(n, -1);
        }
        // vの根を求める
        //求めると同時に親を根に置き換える(木の圧縮)
        long long int root(long long int v) {
            if (parent[v] < 0) {
                return v;
            } else {
                parent[v] = root(parent[v]);
                return parent[v];
            }
        }
        // vが属するグループの要素数を求める
        long long int size(long long int v) {
            return -parent[root(v)];
        }
        // vとwを繋げる
        void unite(long long int v, long long int w) {
            v = root(v);
            w = root(w);
            if (v == w) return;
            if (parent[v] < parent[w]) swap(v, w);
            parent[w] += parent[v];
            parent[v] = w;
        }
        // vとwが同値か判定
        bool isSame(long long int v, long long int w) {
            return root(v) == root(w);
        }
    };${0}

snippet     segment_tree
abbr        segment_tree<Mnd>
options     head
    // セグメント木
    // ref:https://ei1333.github.io/luzhiled/snippets/structure/segment-tree.html
    template <typename Mnd>
    struct segment_tree {
        int sz;
        vector<Mnd> data;
        function<Mnd(Mnd, Mnd)> f;
        Mnd e;
        //サイズだけ指定して初期化
        segment_tree(int _sz, function<Mnd(Mnd, Mnd)> _f, Mnd _e) : f(_f), e(_e) {
            sz = 1;
            while (sz < _sz) sz <<= 1;
            data.assign(sz * 2, e);
        }
        //参照渡しなので代入とかもできる
        Mnd& operator[](const int& k) {
            return data[k + sz];
        }
        //木を構築 O(n)
        void build() {
            for (int i = sz - 1; i > 0; i--)
                data[i] = f(data[2 * i], data[2 * i + 1]);
        }
        //更新しつつ木を再構築 O(log n)
        void update(int k, Mnd x) {
            data[k += sz] = x;
            while (k >>= 1) data[k] = f(data[2 * k], data[2 * k + 1]);
        }
        //[a,b)でのクエリに答える　O(log n)
        Mnd query(int a, int b) const {
            Mnd l = e, r = e;
            for (a += sz, b += sz; a < b; a >>= 1, b >>= 1) {
                if (a & 1) l = f(l, data[a++]);
                if (b & 1) r = f(r, data[--b]);
            }
            return f(l, r);
        }
    };${0}

snippet     segment_tree_lazy
abbr        segment_tree(n,f,g,h,e,id)
options     head
    // 遅延セグメント木
    // ref:https://ei1333.github.io/luzhiled/snippets/structure/segment-tree.html
    template <typename Monoid, typename OperatorMonoid = Monoid>
    struct segment_tree_lazy {
        using F = function<Monoid(Monoid, Monoid)>;
        using G = function<Monoid(Monoid, OperatorMonoid)>;
        using H = function<OperatorMonoid(OperatorMonoid, OperatorMonoid)>;
        int sz, height;
        vector<Monoid> data;
        vector<OperatorMonoid> lazy;
        const F f;
        const G g;
        const H h;
        const Monoid e;
        const OperatorMonoid id;
        segment_tree_lazy(int _sz, const F _f, const G _g, const H _h,
                          const Monoid& _e, const OperatorMonoid _id)
            : f(_f), g(_g), h(_h), e(_e), id(_id) {
            sz = 1, height = 0;
            while (sz < _sz) sz <<= 1, height++;
            data.assign(2 * sz, e);
            lazy.assign(2 * sz, id);
        }
        void set(const int k, const Monoid& x) {
            data[k + sz] = x;
        }
        Monoid operator[](const int& k) {
            return query(k, k + 1);
        }
        void build() {
            for (int i = sz - 1; i > 0; i--)
                data[i] = f(data[i * 2], data[i * 2 + 1]);
        }
        Monoid reflect(int k) {
            return lazy[k] == id ? data[k] : g(data[k], lazy[k]);
        }
        void propagate(int k) {
            if (lazy[k] != id) {
                lazy[2 * k] = h(lazy[2 * k], lazy[k]);
                lazy[2 * k + 1] = h(lazy[2 * k + 1], lazy[k]);
                data[k] = reflect(k);
                lazy[k] = id;
            }
        }
        void recalc(int k) {
            while (k >>= 1) data[k] = f(reflect(2 * k), reflect(2 * k + 1));
        }
        // 自分より上にあるやつ全てに対して上から順にpropagate
        void thrust(int k) {
            for (int i = height; i > 0; i--) propagate(k >> i);
        }
        // [a,b)にxを作用させる
        void update(int a, int b, const OperatorMonoid& x) {
            thrust(a += sz), thrust(b += sz - 1);
            for (int l = a, r = b + 1; l < r; l >>= 1, r >>= 1) {
                if (l & 1) lazy[l] = h(lazy[l], x), ++l;
                if (r & 1) --r, lazy[r] = h(lazy[r], x);
            }
            recalc(a), recalc(b);
        }
        Monoid query(int a, int b) {
            thrust(a += sz), thrust(b += sz - 1);
            Monoid L = e, R = e;
            for (int l = a, r = b + 1; l < r; l >>= 1, r >>= 1) {
                if (l & 1) L = f(L, reflect(l++));
                if (r & 1) R = f(reflect(--r), R);
            }
            return f(L, R);
        }
    };${0}

snippet     fft
abbr        fft+C[X]の積
alias       fft,dft
options     head
    using Complex = complex<double>;

    // 離散高速フーリエ変換 数列の長さは2冪を仮定
    vector<Complex> DFT(vector<Complex>& f, int sign = 1) {
        int n = f.size();
        if (n == 1) return f;
        vector<Complex> f0(n / 2), f1(n / 2);
        for (int i = 0; i < n / 2; i++) {
            f0[i] = f[2 * i + 0];
            f1[i] = f[2 * i + 1];
        }
        f0 = DFT(f0, sign), f1 = DFT(f1, sign);
        vector<Complex> res(n);
        Complex zeta(cos(2 * M_PI / n), sin(2 * M_PI / n) * sign);
        Complex pow_zeta(1);
        for (int i = 0; i < n; i++) {
            res[i] = f0[i % (n / 2)] + pow_zeta * f1[i % (n / 2)];
            pow_zeta *= zeta;
        }
        return res;
    }
    // DFTの逆変換
    vector<Complex> inv_DFT(vector<Complex> f) {
        int n = f.size();
        vector<Complex> res = DFT(f, -1);
        for (int i = 0; i < n; i++) res[i] /= n;
        return res;
    }
    // 複素の多項式の積
    vector<Complex> multiply(vector<Complex> f, vector<Complex> g) {
        int temp = f.size() + g.size() - 1;
        int n = 1;
        while (n < temp) n <<= 1;
        f.resize(n), g.resize(n);
        f = DFT(f), g = DFT(g);
        for (int i = 0; i < n; i++) f[i] *= g[i];
        f = inv_DFT(f);
        f.resize(temp);
        return f;
    }${0}
